package com.example.assistant.service;

import com.example.assistant.config.PromptConfig;
import com.example.assistant.model.ChatRequest;
import com.example.assistant.util.RetryUtils;

import org.springframework.ai.chat.client.ChatClient;

import org.springframework.ai.chat.memory.ChatMemory;
import org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;

import org.springframework.ai.vectorstore.VectorStore;
import org.springframework.ai.chat.client.advisor.vectorstore.QuestionAnswerAdvisor;

import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.MediaType;
import org.springframework.http.MediaTypeFactory;
import org.springframework.stereotype.Service;
import org.springframework.util.MimeType;
import org.springframework.util.MimeTypeUtils;
import software.amazon.awssdk.services.bedrockruntime.model.ValidationException;

import java.util.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class ChatService {
    private static final Logger logger = LoggerFactory.getLogger(ChatService.class);

    private final ChatClient chatClient;
    private final ChatMemoryService chatMemoryService;

    public ChatService(ChatClient.Builder chatClientBuilder,
                      ChatMemoryService chatMemoryService,
                      VectorStore vectorStore,
                      DateTimeService dateTimeService) {

        this.chatClient = chatClientBuilder
            .defaultSystem(PromptConfig.SYSTEM_PROMPT)
            .defaultAdvisors(
                MessageChatMemoryAdvisor.builder(chatMemoryService.getChatMemory()).build(),
                QuestionAnswerAdvisor.builder(vectorStore).build()
            )
            .defaultTools(dateTimeService)
            .build();

        this.chatMemoryService = chatMemoryService;

        logger.info("ChatService initialized with embedded ChatClient");
    }

    public String processChat(ChatRequest request) {
        try {
            logger.info("Processing chat request - hasFile: {}, hasPrompt: {}, fileName: {}",
                       request.hasFile(), request.hasPrompt(), request.fileName());

            if (!request.hasFile()) {
                return RetryUtils.executeWithRetry(() -> {
                    var chatResponse = chatClient
                        .prompt().user(request.prompt())
                        .advisors(advisor -> advisor.param(ChatMemory.CONVERSATION_ID, chatMemoryService.getCurrentConversationId()))
                        .call().chatResponse();

                    return (chatResponse != null) ? chatResponse.getResult().getOutput().getText() : "I don't know - no response received.";
                });
            } else {
                MimeType mimeType;
                if (request.fileName() != null && !request.fileName().trim().isEmpty()) {
                    MediaType mediaType = MediaTypeFactory.getMediaType(request.fileName())
                        .orElse(MediaType.APPLICATION_OCTET_STREAM);
                    mimeType = new MimeType(mediaType.getType(), mediaType.getSubtype());
                } else {
                    mimeType = MimeTypeUtils.APPLICATION_OCTET_STREAM;
                }
                byte[] fileData = Base64.getDecoder().decode(request.fileBase64());
                ByteArrayResource resource = new ByteArrayResource(fileData);

                return RetryUtils.executeWithRetry(() -> {
                                // Determine prompt inline
                    String actualPrompt;
                    if (!request.hasPrompt()) {
                        logger.info("Using document analysis prompt for file: {}", request.fileName());
                        actualPrompt = PromptConfig.DOCUMENT_ANALYSIS_PROMPT;
                    } else {
                        logger.info("Using user prompt: '{}'", request.prompt());
                        actualPrompt = request.prompt();
                    }
                    var chatResponse = chatClient
                        .prompt()
                        .user(userSpec -> {
                            userSpec.text(actualPrompt);
                            userSpec.media(mimeType, resource);
                        })
                        .advisors(advisor -> advisor.param(ChatMemory.CONVERSATION_ID, chatMemoryService.getCurrentConversationId()))
                        .call().chatResponse();

                    String response = (chatResponse != null) ? chatResponse.getResult().getOutput().getText() : "I don't know - no response received.";
                    return response;
                });
            }
        } catch (ValidationException e) {
            logger.warn("AWS Bedrock validation error: {}", e.getMessage());
            return "Invalid request format. Please check your input and try again.";
        } catch (Exception e) {
            if (RetryUtils.isAwsThrottlingRelated(e)) {
                logger.error("Throttling exception after all retry attempts: {}", e.getMessage());
                return "The AI service is currently experiencing high demand. Please try again in a few minutes.";
            }
            logger.error("Error processing chat request", e);
            return "I don't know - there was an error processing your request.";
        }
    }
}
